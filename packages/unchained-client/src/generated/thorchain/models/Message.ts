// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Thorchain Unchained API
 * Provides access to thorchain chain data.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Value } from './Value';
import {
    ValueFromJSON,
    ValueFromJSONTyped,
    ValueToJSON,
} from './Value';

/**
 * Contains info about a transaction message
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    index: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    origin: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    type: string;
    /**
     * 
     * @type {Value}
     * @memberof Message
     */
    value: Value;
}

/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "index" in value;
    isInstance = isInstance && "origin" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'from': json['from'],
        'index': json['index'],
        'origin': json['origin'],
        'to': json['to'],
        'type': json['type'],
        'value': ValueFromJSON(json['value']),
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from': value.from,
        'index': value.index,
        'origin': value.origin,
        'to': value.to,
        'type': value.type,
        'value': ValueToJSON(value.value),
    };
}

