// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * @shapeshiftoss/litecoin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Vin } from './Vin';
import {
    VinFromJSON,
    VinFromJSONTyped,
    VinToJSON,
} from './Vin';
import type { Vout } from './Vout';
import {
    VoutFromJSON,
    VoutFromJSONTyped,
    VoutToJSON,
} from './Vout';

/**
 * Contains info about a transaction
 * @export
 * @interface Tx
 */
export interface Tx {
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    txid: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    blockHash?: string;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    blockHeight: number;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    timestamp: number;
    /**
     * 
     * @type {Array<Vin>}
     * @memberof Tx
     */
    vin: Array<Vin>;
    /**
     * 
     * @type {Array<Vout>}
     * @memberof Tx
     */
    vout: Array<Vout>;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    confirmations: number;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    fee: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    hex: string;
}

/**
 * Check if a given object implements the Tx interface.
 */
export function instanceOfTx(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "txid" in value;
    isInstance = isInstance && "blockHeight" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "vin" in value;
    isInstance = isInstance && "vout" in value;
    isInstance = isInstance && "confirmations" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "hex" in value;

    return isInstance;
}

export function TxFromJSON(json: any): Tx {
    return TxFromJSONTyped(json, false);
}

export function TxFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tx {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'txid': json['txid'],
        'blockHash': !exists(json, 'blockHash') ? undefined : json['blockHash'],
        'blockHeight': json['blockHeight'],
        'timestamp': json['timestamp'],
        'vin': ((json['vin'] as Array<any>).map(VinFromJSON)),
        'vout': ((json['vout'] as Array<any>).map(VoutFromJSON)),
        'confirmations': json['confirmations'],
        'value': json['value'],
        'fee': json['fee'],
        'hex': json['hex'],
    };
}

export function TxToJSON(value?: Tx | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'txid': value.txid,
        'blockHash': value.blockHash,
        'blockHeight': value.blockHeight,
        'timestamp': value.timestamp,
        'vin': ((value.vin as Array<any>).map(VinToJSON)),
        'vout': ((value.vout as Array<any>).map(VoutToJSON)),
        'confirmations': value.confirmations,
        'value': value.value,
        'fee': value.fee,
        'hex': value.hex,
    };
}

