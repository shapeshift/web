// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Thorchain Unchained API
 * Provides access to thorchain chain data.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { Value } from './Value';
import {
    ValueFromJSON,
    ValueFromJSONTyped,
    ValueToJSON,
} from './Value';

/**
 * 
 * @export
 * @interface TxAllOf
 */
export interface TxAllOf {
    /**
     * 
     * @type {number}
     * @memberof TxAllOf
     */
    confirmations: number;
    /**
     * Contains info about transaction events keyed by message index
     * @type {{ [key: string]: { [key: string]: { [key: string]: string; }; }; }}
     * @memberof TxAllOf
     */
    events: { [key: string]: { [key: string]: { [key: string]: string; }; }; };
    /**
     * 
     * @type {Value}
     * @memberof TxAllOf
     */
    fee: Value;
    /**
     * 
     * @type {string}
     * @memberof TxAllOf
     */
    gasUsed: string;
    /**
     * 
     * @type {string}
     * @memberof TxAllOf
     */
    gasWanted: string;
    /**
     * 
     * @type {number}
     * @memberof TxAllOf
     */
    index: number;
    /**
     * 
     * @type {string}
     * @memberof TxAllOf
     */
    memo?: string;
    /**
     * 
     * @type {Array<Message>}
     * @memberof TxAllOf
     */
    messages: Array<Message>;
    /**
     * 
     * @type {string}
     * @memberof TxAllOf
     */
    value: string;
}

/**
 * Check if a given object implements the TxAllOf interface.
 */
export function instanceOfTxAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "confirmations" in value;
    isInstance = isInstance && "events" in value;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "gasUsed" in value;
    isInstance = isInstance && "gasWanted" in value;
    isInstance = isInstance && "index" in value;
    isInstance = isInstance && "messages" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function TxAllOfFromJSON(json: any): TxAllOf {
    return TxAllOfFromJSONTyped(json, false);
}

export function TxAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): TxAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'confirmations': json['confirmations'],
        'events': json['events'],
        'fee': ValueFromJSON(json['fee']),
        'gasUsed': json['gasUsed'],
        'gasWanted': json['gasWanted'],
        'index': json['index'],
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'messages': ((json['messages'] as Array<any>).map(MessageFromJSON)),
        'value': json['value'],
    };
}

export function TxAllOfToJSON(value?: TxAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'confirmations': value.confirmations,
        'events': value.events,
        'fee': ValueToJSON(value.fee),
        'gasUsed': value.gasUsed,
        'gasWanted': value.gasWanted,
        'index': value.index,
        'memo': value.memo,
        'messages': ((value.messages as Array<any>).map(MessageToJSON)),
        'value': value.value,
    };
}

