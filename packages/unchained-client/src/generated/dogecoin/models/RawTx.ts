// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * @shapeshiftoss/dogecoin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RawTxVinInner } from './RawTxVinInner';
import {
    RawTxVinInnerFromJSON,
    RawTxVinInnerFromJSONTyped,
    RawTxVinInnerToJSON,
} from './RawTxVinInner';
import type { RawTxVoutInner } from './RawTxVoutInner';
import {
    RawTxVoutInnerFromJSON,
    RawTxVoutInnerFromJSONTyped,
    RawTxVoutInnerToJSON,
} from './RawTxVoutInner';

/**
 * Contains info about a transaction as returned from the node
 * @export
 * @interface RawTx
 */
export interface RawTx {
    /**
     * 
     * @type {string}
     * @memberof RawTx
     */
    txid: string;
    /**
     * 
     * @type {string}
     * @memberof RawTx
     */
    hash: string;
    /**
     * 
     * @type {number}
     * @memberof RawTx
     */
    version: number;
    /**
     * 
     * @type {number}
     * @memberof RawTx
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof RawTx
     */
    vsize: number;
    /**
     * 
     * @type {number}
     * @memberof RawTx
     */
    weight: number;
    /**
     * 
     * @type {number}
     * @memberof RawTx
     */
    locktime: number;
    /**
     * 
     * @type {Array<RawTxVinInner>}
     * @memberof RawTx
     */
    vin: Array<RawTxVinInner>;
    /**
     * 
     * @type {Array<RawTxVoutInner>}
     * @memberof RawTx
     */
    vout: Array<RawTxVoutInner>;
    /**
     * 
     * @type {string}
     * @memberof RawTx
     */
    hex: string;
    /**
     * 
     * @type {string}
     * @memberof RawTx
     */
    blockhash: string;
    /**
     * 
     * @type {number}
     * @memberof RawTx
     */
    confirmations: number;
    /**
     * 
     * @type {number}
     * @memberof RawTx
     */
    time: number;
    /**
     * 
     * @type {number}
     * @memberof RawTx
     */
    blocktime: number;
}

/**
 * Check if a given object implements the RawTx interface.
 */
export function instanceOfRawTx(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "txid" in value;
    isInstance = isInstance && "hash" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "vsize" in value;
    isInstance = isInstance && "weight" in value;
    isInstance = isInstance && "locktime" in value;
    isInstance = isInstance && "vin" in value;
    isInstance = isInstance && "vout" in value;
    isInstance = isInstance && "hex" in value;
    isInstance = isInstance && "blockhash" in value;
    isInstance = isInstance && "confirmations" in value;
    isInstance = isInstance && "time" in value;
    isInstance = isInstance && "blocktime" in value;

    return isInstance;
}

export function RawTxFromJSON(json: any): RawTx {
    return RawTxFromJSONTyped(json, false);
}

export function RawTxFromJSONTyped(json: any, ignoreDiscriminator: boolean): RawTx {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'txid': json['txid'],
        'hash': json['hash'],
        'version': json['version'],
        'size': json['size'],
        'vsize': json['vsize'],
        'weight': json['weight'],
        'locktime': json['locktime'],
        'vin': ((json['vin'] as Array<any>).map(RawTxVinInnerFromJSON)),
        'vout': ((json['vout'] as Array<any>).map(RawTxVoutInnerFromJSON)),
        'hex': json['hex'],
        'blockhash': json['blockhash'],
        'confirmations': json['confirmations'],
        'time': json['time'],
        'blocktime': json['blocktime'],
    };
}

export function RawTxToJSON(value?: RawTx | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'txid': value.txid,
        'hash': value.hash,
        'version': value.version,
        'size': value.size,
        'vsize': value.vsize,
        'weight': value.weight,
        'locktime': value.locktime,
        'vin': ((value.vin as Array<any>).map(RawTxVinInnerToJSON)),
        'vout': ((value.vout as Array<any>).map(RawTxVoutInnerToJSON)),
        'hex': value.hex,
        'blockhash': value.blockhash,
        'confirmations': value.confirmations,
        'time': value.time,
        'blocktime': value.blocktime,
    };
}

