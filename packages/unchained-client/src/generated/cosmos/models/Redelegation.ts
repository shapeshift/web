// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Cosmos Unchained API
 * Provides access to cosmos chain data.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RedelegationEntry } from './RedelegationEntry';
import {
    RedelegationEntryFromJSON,
    RedelegationEntryFromJSONTyped,
    RedelegationEntryToJSON,
} from './RedelegationEntry';
import type { Validator } from './Validator';
import {
    ValidatorFromJSON,
    ValidatorFromJSONTyped,
    ValidatorToJSON,
} from './Validator';

/**
 * Contains info about a staking redelegation
 * @export
 * @interface Redelegation
 */
export interface Redelegation {
    /**
     * 
     * @type {Validator}
     * @memberof Redelegation
     */
    destinationValidator: Validator;
    /**
     * 
     * @type {Array<RedelegationEntry>}
     * @memberof Redelegation
     */
    entries: Array<RedelegationEntry>;
    /**
     * 
     * @type {Validator}
     * @memberof Redelegation
     */
    sourceValidator: Validator;
}

/**
 * Check if a given object implements the Redelegation interface.
 */
export function instanceOfRedelegation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "destinationValidator" in value;
    isInstance = isInstance && "entries" in value;
    isInstance = isInstance && "sourceValidator" in value;

    return isInstance;
}

export function RedelegationFromJSON(json: any): Redelegation {
    return RedelegationFromJSONTyped(json, false);
}

export function RedelegationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Redelegation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'destinationValidator': ValidatorFromJSON(json['destinationValidator']),
        'entries': ((json['entries'] as Array<any>).map(RedelegationEntryFromJSON)),
        'sourceValidator': ValidatorFromJSON(json['sourceValidator']),
    };
}

export function RedelegationToJSON(value?: Redelegation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'destinationValidator': ValidatorToJSON(value.destinationValidator),
        'entries': ((value.entries as Array<any>).map(RedelegationEntryToJSON)),
        'sourceValidator': ValidatorToJSON(value.sourceValidator),
    };
}

