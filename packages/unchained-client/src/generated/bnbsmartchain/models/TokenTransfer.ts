// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * @shapeshiftoss/bnbsmartchain-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 9.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Contains info about a token including transfer details
 * @export
 * @interface TokenTransfer
 */
export interface TokenTransfer {
    /**
     * 
     * @type {string}
     * @memberof TokenTransfer
     */
    contract: string;
    /**
     * 
     * @type {number}
     * @memberof TokenTransfer
     */
    decimals: number;
    /**
     * 
     * @type {string}
     * @memberof TokenTransfer
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TokenTransfer
     */
    symbol: string;
    /**
     * 
     * @type {string}
     * @memberof TokenTransfer
     */
    type: string;
    /**
     * nft or multi token id
     * @type {string}
     * @memberof TokenTransfer
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenTransfer
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof TokenTransfer
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof TokenTransfer
     */
    value: string;
}

/**
 * Check if a given object implements the TokenTransfer interface.
 */
export function instanceOfTokenTransfer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contract" in value;
    isInstance = isInstance && "decimals" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "from" in value;
    isInstance = isInstance && "to" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function TokenTransferFromJSON(json: any): TokenTransfer {
    return TokenTransferFromJSONTyped(json, false);
}

export function TokenTransferFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenTransfer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contract': json['contract'],
        'decimals': json['decimals'],
        'name': json['name'],
        'symbol': json['symbol'],
        'type': json['type'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'from': json['from'],
        'to': json['to'],
        'value': json['value'],
    };
}

export function TokenTransferToJSON(value?: TokenTransfer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contract': value.contract,
        'decimals': value.decimals,
        'name': value.name,
        'symbol': value.symbol,
        'type': value.type,
        'id': value.id,
        'from': value.from,
        'to': value.to,
        'value': value.value,
    };
}

