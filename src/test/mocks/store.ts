import { OrderDirection } from '@/components/OrderDropdown/types'
import { SortOptionsKeys } from '@/components/SortDropdown/types'
import { DEFAULT_HISTORY_TIMEFRAME } from '@/constants/Config'
import { FiatCurrencyTypeEnum } from '@/constants/FiatCurrencyTypeEnum'
import { fiatCurrencyItemsByCode } from '@/lib/fiatCurrencies/fiatCurrencies'
import { MarketsCategories } from '@/pages/Markets/constants'
import type { ReduxState } from '@/state/reducer'
import { defaultAsset } from '@/state/slices/assetsSlice/assetsSlice'
import {
  ExpiryOption,
  LimitPriceMode,
  PriceDirection,
} from '@/state/slices/limitOrderInputSlice/constants'
import {
  CurrencyFormats,
  HomeMarketView,
  QuoteDisplayOption,
} from '@/state/slices/preferencesSlice/preferencesSlice'
import { QuoteSortOption } from '@/state/slices/tradeQuoteSlice/types'

const mockApiFactory = <T extends unknown>(reducerPath: T) => ({
  queries: {},
  mutations: {},
  provided: {},
  subscriptions: {},
  config: {
    reducerPath,
    keepUnusedDataFor: 0,
    online: false,
    focused: false,
    middlewareRegistered: false,
    refetchOnFocus: false,
    refetchOnMountOrArgChange: false,
    refetchOnReconnect: false,
    invalidationBehavior: 'delayed' as const,
  },
})

const mockSwapperApi = Object.assign(mockApiFactory('swapperApi' as const), {
  provided: {
    TradeQuote: {},
  },
})

const mockLimitOrderApi = Object.assign(mockApiFactory('limitOrderApi' as const), {
  provided: {
    limitOrders: {},
    limitOrderQuote: {},
  },
  _persist: {
    version: 0,
    rehydrated: false,
  },
})

export const mockStore: ReduxState = {
  assetApi: mockApiFactory('assetApi' as const),
  portfolioApi: mockApiFactory('portfolioApi' as const),
  marketApi: mockApiFactory('marketApi' as const),
  txHistoryApi: mockApiFactory('txHistoryApi' as const),
  portalsApi: mockApiFactory('portalsApi' as const),
  swapperApi: mockSwapperApi,
  foxyApi: mockApiFactory('foxyApi' as const),
  fiatRampApi: mockApiFactory('fiatRampApi' as const),
  snapshotApi: mockApiFactory('snapshotApi' as const),
  opportunitiesApi: mockApiFactory('opportunitiesApi' as const),
  abiApi: mockApiFactory('abiApi' as const),
  limitOrderApi: mockLimitOrderApi,
  portfolio: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    isPortfolioGetAccountLoadingByAccountId: {},
    accounts: {
      byId: {},
      ids: [],
    },
    accountBalances: {
      byId: {},
      ids: [],
    },
    accountMetadata: {
      byId: {},
      ids: [],
    },
    enabledAccountIds: {},
    wallet: {
      byId: {},
      ids: [],
    },
  },
  preferences: {
    featureFlags: {
      Optimism: false,
      Polygon: false,
      Gnosis: false,
      Arbitrum: false,
      ArbitrumNova: false,
      Solana: false,
      ArbitrumBridge: false,
      Base: false,
      BnbSmartChain: false,
      Mayachain: false,
      ZrxSwap: false,
      ThorSwap: false,
      Cowswap: false,
      WalletConnectToDapps: false,
      WalletConnectToDappsV2: false,
      SaversVaults: false,
      SaversVaultsDeposit: false,
      SaversVaultsWithdraw: false,
      Mixpanel: false,
      DynamicLpAssets: false,
      ReadOnlyAssets: false,
      Chatwoot: false,
      AdvancedSlippage: false,
      WalletConnectV2: false,
      CustomSendNonce: false,
      ThorchainLending: false,
      ThorchainLendingBorrow: false,
      ThorchainLendingRepay: false,
      ThorchainLP: false,
      ThorchainLpDeposit: false,
      ThorchainLpWithdraw: false,
      LedgerWallet: false,
      GridPlusWallet: false,
      ThorchainSwapLongtail: false,
      ThorchainSwapL1ToLongtail: false,
      AccountManagement: false,
      AccountManagementLedger: false,
      RFOX: false,
      RFOX_LP: false,
      CustomTokenImport: false,
      UsdtApprovalReset: false,
      RunePool: false,
      RunePoolDeposit: false,
      RunePoolWithdraw: false,
      PortalsSwap: false,
      Markets: false,
      PhantomWallet: false,
      FoxPage: false,
      FoxPageRFOX: false,
      FoxPageFoxSection: false,
      FoxPageFoxFarmingSection: false,
      FoxPageGovernance: false,
      LimitOrders: false,
      ChainflipSwap: false,
      SolanaSwapper: false,
      ChainflipDca: false,
      JupiterSwap: false,
      NewWalletFlow: false,
      NewLimitFlow: false,
      ThorchainSwapperVolatilityAck: false,
      RelaySwapper: false,
      ActionCenter: false,
      ThorchainTcy: false,
      ThorchainTcyWidget: false,
      ThorchainTcyActivity: false,
      MayaSwap: false,
      ButterSwap: false,
      LazyTxHistory: false,
      RfoxFoxEcosystemPage: false,
      QuickBuy: false,
      NewWalletManager: false,
      SwapperFiatRamps: false,
      LedgerReadOnly: false,
    },
    quickBuyAmounts: [10, 50, 100],
    quoteDisplayOption: QuoteDisplayOption.Basic,
    selectedLocale: 'en',
    balanceThresholdUserCurrency: '0',
    selectedCurrency: 'USD',
    currencyFormat: CurrencyFormats.DotDecimalCommaThousands,
    chartTimeframe: DEFAULT_HISTORY_TIMEFRAME,
    showWelcomeModal: false,
    showConsentBanner: true,
    showSnapsModal: true,
    snapInstalled: false,
    watchedAssets: [],
    spamMarkedAssets: [],
    selectedHomeView: HomeMarketView.TopAssets,
    hasWalletSeenTcyClaimAlert: {},
    highlightedTokensFilters: {
      selectedCategory: MarketsCategories.Trending,
      selectedOrder: OrderDirection.Descending,
      selectedSort: SortOptionsKeys.Apy,
      selectedChainId: 'all',
    },
    hasSeenRatingModal: false,
    // the following object is required by redux-persist
    _persist: {
      version: 0,
      rehydrated: false,
    },
  },
  assets: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    byId: {},
    ids: [],
    relatedAssetIndex: {},
  },
  marketData: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    crypto: {
      byId: {},
      ids: [],
      priceHistory: {},
    },
    fiat: {
      byId: {},
      ids: [],
      priceHistory: {},
    },
  },
  txHistory: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    txs: {
      byId: {},
      byAccountIdAssetId: {},
      ids: [],
    },
    hydrationMeta: {},
  },
  action: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    byId: {},
    ids: [],
  },
  swap: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    byId: {},
    ids: [],
    activeSwapId: null,
  },
  opportunities: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    lp: {
      byAccountId: {},
      byId: {},
      ids: [],
    },
    staking: {
      byAccountId: {},
      byId: {},
      ids: [],
    },
    userStaking: {
      byId: {},
      ids: [],
    },
  },
  tradeInput: {
    buyAsset: defaultAsset,
    sellAsset: defaultAsset,
    sellAccountId: undefined,
    buyAccountId: undefined,
    sellAmountCryptoPrecision: '0',
    isInputtingFiatSellAmount: false,
    manualReceiveAddress: undefined,
    isManualReceiveAddressValidating: false,
    isManualReceiveAddressEditing: false,
    isManualReceiveAddressValid: undefined,
    slippagePreferencePercentage: undefined,
    sellAssetUtxoChangeAddress: undefined,
    selectedBuyAssetChainId: 'All',
    selectedSellAssetChainId: 'All',
  },
  limitOrderInput: {
    buyAsset: defaultAsset,
    sellAsset: defaultAsset,
    sellAccountId: undefined,
    buyAccountId: undefined,
    sellAmountCryptoPrecision: '0',
    isInputtingFiatSellAmount: false,
    manualReceiveAddress: undefined,
    isManualReceiveAddressValidating: false,
    isManualReceiveAddressEditing: false,
    isManualReceiveAddressValid: undefined,
    limitPrice: {
      [PriceDirection.BuyAssetDenomination]: '0',
      [PriceDirection.SellAssetDenomination]: '0',
    },
    limitPriceMode: LimitPriceMode.Market,
    expiry: ExpiryOption.SevenDays,
    limitPriceDirection: PriceDirection.BuyAssetDenomination,
    selectedBuyAssetChainId: 'All',
    selectedSellAssetChainId: 'All',
  },
  tradeRampInput: {
    buyAsset: defaultAsset,
    sellAsset: defaultAsset,
    sellAccountId: undefined,
    buyAccountId: undefined,
    sellAmountCryptoPrecision: '0',
    isInputtingFiatSellAmount: false,
    manualReceiveAddress: undefined,
    isManualReceiveAddressValidating: false,
    isManualReceiveAddressEditing: false,
    isManualReceiveAddressValid: undefined,
    selectedBuyAssetChainId: 'All',
    selectedSellAssetChainId: 'All',
    buyFiatCurrency: fiatCurrencyItemsByCode[FiatCurrencyTypeEnum.USD],
    sellFiatCurrency: fiatCurrencyItemsByCode[FiatCurrencyTypeEnum.USD],
    sellFiatAmount: '0',
    slippagePreferencePercentage: undefined,
    selectedBuyFiatRampQuote: null,
    selectedSellFiatRampQuote: null,
  },
  tradeQuote: {
    activeQuoteMeta: undefined,
    confirmedQuote: undefined,
    activeStep: undefined,
    isQuickBuy: false,
    tradeExecution: {},
    tradeQuotes: {},
    tradeQuoteDisplayCache: [],
    isTradeQuoteRequestAborted: false,
    sortOption: QuoteSortOption.BEST_RATE,
  },
  limitOrder: {
    activeQuote: undefined,
    confirmedLimitOrder: {},
    orderSubmission: {},
  },
  snapshot: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    votingPower: undefined,
    strategies: undefined,
    proposals: undefined,
  },
  localWallet: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    walletType: null,
    walletDeviceId: null,
    nativeWalletName: null,
    rdns: null,
  },
  gridplus: {
    _persist: {
      version: 0,
      rehydrated: false,
    },
    connection: {
      physicalDeviceId: null,
      sessionId: null,
    },
    safecards: {
      byId: {},
      ids: [],
      activeId: null,
    },
  },
}
