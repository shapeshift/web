// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Cosmos Unchained API
 * Provides access to cosmos chain data.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ValidatorCommission } from './ValidatorCommission';
import {
    ValidatorCommissionFromJSON,
    ValidatorCommissionFromJSONTyped,
    ValidatorCommissionToJSON,
} from './ValidatorCommission';
import type { ValidatorUnbonding } from './ValidatorUnbonding';
import {
    ValidatorUnbondingFromJSON,
    ValidatorUnbondingFromJSONTyped,
    ValidatorUnbondingToJSON,
} from './ValidatorUnbonding';

/**
 * Contains info about a validator
 * @export
 * @interface Validator
 */
export interface Validator {
    /**
     * 
     * @type {string}
     * @memberof Validator
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof Validator
     */
    apr: string;
    /**
     * 
     * @type {ValidatorCommission}
     * @memberof Validator
     */
    commission: ValidatorCommission;
    /**
     * 
     * @type {string}
     * @memberof Validator
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof Validator
     */
    jailed: boolean;
    /**
     * 
     * @type {string}
     * @memberof Validator
     */
    moniker: string;
    /**
     * 
     * @type {string}
     * @memberof Validator
     */
    shares: string;
    /**
     * 
     * @type {string}
     * @memberof Validator
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof Validator
     */
    tokens: string;
    /**
     * 
     * @type {ValidatorUnbonding}
     * @memberof Validator
     */
    unbonding: ValidatorUnbonding;
    /**
     * 
     * @type {string}
     * @memberof Validator
     */
    website: string;
}

/**
 * Check if a given object implements the Validator interface.
 */
export function instanceOfValidator(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "apr" in value;
    isInstance = isInstance && "commission" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "jailed" in value;
    isInstance = isInstance && "moniker" in value;
    isInstance = isInstance && "shares" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "tokens" in value;
    isInstance = isInstance && "unbonding" in value;
    isInstance = isInstance && "website" in value;

    return isInstance;
}

export function ValidatorFromJSON(json: any): Validator {
    return ValidatorFromJSONTyped(json, false);
}

export function ValidatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Validator {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'apr': json['apr'],
        'commission': ValidatorCommissionFromJSON(json['commission']),
        'description': json['description'],
        'jailed': json['jailed'],
        'moniker': json['moniker'],
        'shares': json['shares'],
        'status': json['status'],
        'tokens': json['tokens'],
        'unbonding': ValidatorUnbondingFromJSON(json['unbonding']),
        'website': json['website'],
    };
}

export function ValidatorToJSON(value?: Validator | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'apr': value.apr,
        'commission': ValidatorCommissionToJSON(value.commission),
        'description': value.description,
        'jailed': value.jailed,
        'moniker': value.moniker,
        'shares': value.shares,
        'status': value.status,
        'tokens': value.tokens,
        'unbonding': ValidatorUnbondingToJSON(value.unbonding),
        'website': value.website,
    };
}

